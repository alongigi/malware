package code;

import com.google.common.base.Splitter;
import org.pcap4j.core.PcapDumper;
import org.pcap4j.core.PcapHandle;
import org.pcap4j.core.PcapNativeException;
import org.pcap4j.core.Pcaps;
import org.pcap4j.packet.EthernetPacket;
import org.pcap4j.packet.IpV4Packet;
import org.pcap4j.packet.Packet;

import java.io.EOFException;
import java.io.PrintWriter;
import java.sql.Timestamp;
import java.util.Date;


public class Main {


    public static void main(String[] args) throws Exception {
        double start_time = Double.parseDouble(args[0]) * 1000;
        int bits = Integer.parseInt(args[1]);
        double window = Integer.parseInt(args[2]) / 1000;
        int cutoff = Integer.parseInt(args[3]);
        String MAC = args[4];
        PcapHandle handle = Pcaps.openOffline(args[5]);
        double currWindow = window;
        int byteSum = 0;
        StringBuilder bitMsg = new StringBuilder();
        while (bitMsg.length() < bits) {
            try {
                Packet packet = handle.getNextPacketEx();
                EthernetPacket.EthernetHeader header = packet.get(EthernetPacket.class).getHeader();
                String destMac = header.getDstAddr().toString();
                Timestamp timestamp = handle.getTimestamp();
                long time = timestamp.getTime();
                if (time < start_time)
                    continue;
                double currWindow1 = (time - start_time) / 1000;
                if(currWindow <= currWindow1) {
                    currWindow +=window;
//                    System.out.println("win: " + currWindow);
//                    System.out.println(byteSum);
                    if(byteSum / window >= cutoff){
                        bitMsg.append(1);
                    }
                    else {
                        bitMsg.append(0);
                    }
                    byteSum = 0;
                }
                if(destMac.equals(MAC)) {
                    IpV4Packet.IpV4Header ipV4Header = (IpV4Packet.IpV4Header) packet.get(EthernetPacket.class).getPayload().getHeader();
                    int msgSize = ipV4Header.getTotalLength();
                    byteSum += msgSize;

                }
            }
             catch (EOFException e) {
                break;
            }
            catch (Exception e){
//                continue;
            }
        }
        System.out.println(bitMsg);
        StringBuilder outputMsg = new StringBuilder();
        for(String s: Splitter.fixedLength(8).split(bitMsg)){
            int val = Integer.parseInt(s, 2);
            char c = (char) val;
            outputMsg.append(c);
        }
        System.out.println(outputMsg);
        PrintWriter writer = new PrintWriter(args[6], "UTF-8");
        writer.println(outputMsg);
        writer.close();
    }
}
